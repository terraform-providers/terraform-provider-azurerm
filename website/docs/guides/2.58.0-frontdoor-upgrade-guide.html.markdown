---
layout: "azurerm"
page_title: "Azure Resource Manager: v2.58.0 Front Door Upgrade Guide"
description: |-
    Azure Resource Manager: v2.58.0 Front Door Upgrade Guide

---

# Overview of the Breaking Changes in the Azure Resource Manager: v2.58.0 release for Front Door

## Resource Behavior Change

With the release of the v2.58.0 provider, if you run the `apply` command against an existing Front Door resource it **will not** apply the detected changes. Instead it will persist the `explicit_resource_order` mapping structure to the state file. Once this operation has completed the resource will resume functioning normally. This change in behavior is due to the underlying service API now returning the JSON response's elements out of order from how it was sent to the resource by Terraform causing unexpected discrepancies in the `plan` after the resource has been provisioned.

## Breaking Changes

* `azurerm_frontdoor` - The `custom_https_provisioning_enabled` field and the `custom_https_configuration` block have been removed from the `azurerm_frontdoor` resource due to changes made by the service team. What this means is you have a `azurerm_frontdoor` configuration file with a `custom_https_configuration` block currently defined, once you upgrade to `v2.58.0` you will need to remove that code from the configuration file and define a separate `azurerm_frontdoor_custom_https_configuration` block in your configuration file for each frontend endpoint regardless if it had a `custom_https_configuration` block or not. If you do not remove these configuration file values after you upgrade you will receive a `An argument named "custom_https_provisioning_enabled" is not expected here.` or `An argument named "custom_https_configuration" is not expected here.` error.

* `azurerm_frontdoor_custom_https_configuration` - The `resource_group_name` field has been removed from the `azurerm_frontdoor_custom_https_configuration` resource. If the `resource_group_name` field has been defined in your current `azurerm_frontdoor_custom_https_configuration` resource configuration file please remove it else you will receive a `An argument named "resource_group_name" is not expected here.` error.

# How to Migrate Your Current Front Door Configuration to Azure Resource Manager: v2.58.0

For this upgrade guide we are going to assume that your configuration file looks something like the below example before you upgraded to `v2.58.0` of the Azure provider. For this upgrade guide we are also assuming that the Front Door resource already exists in Azure and that it is curretnly being managed by Terraform.

**Example Configuration:**

```hcl
provider "azurerm" {
  features {}
  version = "2.57.0"
}

locals {
  default_frontend_name = "default"
  custom_frontend_name  = "custom"
}

resource "azurerm_resource_group" "example" {
  name     = "example-rg"
  location = "westeurope"
}

resource "azurerm_frontdoor" "example" {
  name                                         = "exampleFrontdoor"
  resource_group_name                          = azurerm_resource_group.example.name
  enforce_backend_pools_certificate_name_check = false

  frontend_endpoint {
    name      = "default"
    host_name = "exampleFrontdoor.azurefd.net"

    custom_https_provisioning_enabled = false
  }

  frontend_endpoint {
    name      = "custom"
    host_name = "example-custom.contoso.com"

    custom_https_provisioning_enabled = true

    custom_https_configuration {
      certificate_source = "FrontDoor"
    }
  }

  # Backend Pool 1
  backend_pool {
    name                = "example-AFD-pool-bing"
    load_balancing_name = "example-AFD-bing-LB"
    health_probe_name   = "example-AFD-bing-HP"

    backend {
      host_header = "bing.com"
      address     = "bing.com"
      http_port   = 80
      https_port  = 443
      weight      = 75
      enabled     = true
    }
  }

  routing_rule {
    name               = "example-AFD-bing-RR"
    accepted_protocols = ["Https"]
    patterns_to_match  = ["/*"]
    frontend_endpoints = ["default"]

    forwarding_configuration {
      forwarding_protocol = "MatchRequest"
      backend_pool_name   = "example-AFD-pool-bing"
      cache_enabled       = true
    }
  }

  routing_rule {
    name               = "example-AFD-bing-HTTPtoHTTPS"
    accepted_protocols = ["Http"]
    frontend_endpoints = ["default"]
    patterns_to_match  = ["/*"]

    redirect_configuration {
      redirect_protocol = "HttpsOnly"
      redirect_type     = "Found"
      custom_path       = "/"
    }
  }

  backend_pool_load_balancing {
    name                            = "example-AFD-bing-LB"
    additional_latency_milliseconds = 0
    sample_size                     = 4
    successful_samples_required     = 2
  }

  backend_pool_health_probe {
    name     = "example-AFD-bing-HP"
    protocol = "Https"
  }

  # Backend Pool 2
  backend_pool {
    name                = "example-AFD-pool-google"
    load_balancing_name = "example-AFD-google-LB"
    health_probe_name   = "example-AFD-google-HP"

    backend {
      host_header = "google.com"
      address     = "google.com"
      http_port   = 80
      https_port  = 443
      weight      = 75
      enabled     = true
    }
  }

  routing_rule {
    name               = "example-AFD-google-RR"
    accepted_protocols = ["Https"]
    patterns_to_match  = ["/*", "/poolGoogle/*"]
    frontend_endpoints = ["custom"]

    forwarding_configuration {
      forwarding_protocol = "MatchRequest"
      backend_pool_name   = "example-AFD-pool-google"
      cache_enabled       = true
    }
  }

  routing_rule {
    name               = "example-AFD-google-HTTPtoHTTPS"
    accepted_protocols = ["Http"]
    frontend_endpoints = ["custom"]
    patterns_to_match  = ["/*"]

    redirect_configuration {
      redirect_protocol = "HttpsOnly"
      redirect_type     = "Found"
      custom_path       = "/"
    }
  }

  backend_pool_load_balancing {
    name                            = "example-AFD-google-LB"
    additional_latency_milliseconds = 0
    sample_size                     = 4
    successful_samples_required     = 2
  }

  backend_pool_health_probe {
    name     = "example-AFD-google-HP"
    protocol = "Https"
  }
}
```

Firstly, you will need to upgrade your provider to `v2.58.0` or later in the way you normally would upgrade your provider, for more information about how to upgrade your provider please see the [product documentation](https://learn.hashicorp.com/tutorials/terraform/provider-versioning). For this upgrade guide I am going to force the upgrade via the configuration files `provider` block like this:

```hcl
provider "azurerm" {
  features {}
  version = "2.58.0"
}
```

Once you have updated the `provider` block in your configuration file run the `terraform init` command and you should see the output:

```
Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "azurerm" (hashicorp/azurerm) 2.58.0...

Terraform has been successfully initialized!
```

At this point you now have the latest provider installed in your environment. Now you will need to update your configuration file and remove all of the unsupported attributes and code blocks from the existing configuration file mentioned above in the **Breaking Changes** section of this document. Once you have done that your configuration file should look something like this.

**Example Configuration Post Upgrade to v2.58.0:**

```hcl
provider "azurerm" {
  features {}
  version = "2.58.0"
}

locals {
  default_frontend_name = "default"
  custom_frontend_name  = "custom"
}

resource "azurerm_resource_group" "example" {
  name     = "example-rg"
  location = "westeurope"
}

resource "azurerm_frontdoor" "example" {
  name                                         = "exampleFrontdoor"
  resource_group_name                          = azurerm_resource_group.example.name
  enforce_backend_pools_certificate_name_check = false

  frontend_endpoint {
    name      = "default"
    host_name = "exampleFrontdoor.azurefd.net"
  }

  frontend_endpoint {
    name      = "custom"
    host_name = "example-custom.contoso.com"
  }

  # Backend Pool 1
  backend_pool {
    name                = "example-AFD-pool-bing"
    load_balancing_name = "example-AFD-bing-LB"
    health_probe_name   = "example-AFD-bing-HP"

    backend {
      host_header = "bing.com"
      address     = "bing.com"
      http_port   = 80
      https_port  = 443
      weight      = 75
      enabled     = true
    }
  }

  routing_rule {
    name               = "example-AFD-bing-RR"
    accepted_protocols = ["Https"]
    patterns_to_match  = ["/*"]
    frontend_endpoints = ["default"]

    forwarding_configuration {
      forwarding_protocol = "MatchRequest"
      backend_pool_name   = "example-AFD-pool-bing"
      cache_enabled       = true
    }
  }

  routing_rule {
    name               = "example-AFD-bing-HTTPtoHTTPS"
    accepted_protocols = ["Http"]
    frontend_endpoints = ["default"]
    patterns_to_match  = ["/*"]

    redirect_configuration {
      redirect_protocol = "HttpsOnly"
      redirect_type     = "Found"
      custom_path       = "/"
    }
  }

  backend_pool_load_balancing {
    name                            = "example-AFD-bing-LB"
    additional_latency_milliseconds = 0
    sample_size                     = 4
    successful_samples_required     = 2
  }

  backend_pool_health_probe {
    name     = "example-AFD-bing-HP"
    protocol = "Https"
  }

  # Backend Pool 2
  backend_pool {
    name                = "example-AFD-pool-google"
    load_balancing_name = "example-AFD-google-LB"
    health_probe_name   = "example-AFD-google-HP"

    backend {
      host_header = "google.com"
      address     = "google.com"
      http_port   = 80
      https_port  = 443
      weight      = 75
      enabled     = true
    }
  }

  routing_rule {
    name               = "example-AFD-google-RR"
    accepted_protocols = ["Https"]
    patterns_to_match  = ["/*", "/poolGoogle/*"]
    frontend_endpoints = ["custom"]

    forwarding_configuration {
      forwarding_protocol = "MatchRequest"
      backend_pool_name   = "example-AFD-pool-google"
      cache_enabled       = true
    }
  }

  routing_rule {
    name               = "example-AFD-google-HTTPtoHTTPS"
    accepted_protocols = ["Http"]
    frontend_endpoints = ["custom"]
    patterns_to_match  = ["/*"]

    redirect_configuration {
      redirect_protocol = "HttpsOnly"
      redirect_type     = "Found"
      custom_path       = "/"
    }
  }

  backend_pool_load_balancing {
    name                            = "example-AFD-google-LB"
    additional_latency_milliseconds = 0
    sample_size                     = 4
    successful_samples_required     = 2
  }

  backend_pool_health_probe {
    name     = "example-AFD-google-HP"
    protocol = "Https"
  }
}
```

## What Was Removed:

* `frontend_endpoint` block - in the `frontend_endpoint` block with the name `default` the `custom_https_provisioning_enabled` field.
* `frontend_endpoint` block - in the `frontend_endpoint` block with the name `custom` the `custom_https_provisioning_enabled` field and the `custom_https_configuration` code block.

## What Was Updated:
* `provider` block - In the `provider` block the `version` field was updated to be `2.58.0` from `2.57.0`.

Now you will need to run the `terraform apply -auto-approve` command to create the `explicit_resource_order` table in your state file. If done correctly you should see the output:

```
azurerm_resource_group.example: Refreshing state... [id=/subscriptions/XXXXXX/resourceGroups/example-rg]
azurerm_frontdoor.example: Refreshing state... [id=/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor]
azurerm_frontdoor.example: Modifying... [id=/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor]
azurerm_frontdoor.example: Modifications complete after 3s [id=/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.
```

!> **NOTE:** You can only do this step **ONCE** after the upgrade of the `provider`. If the `explicit_resource_order` table exists in the state file and you run the `apply` command again it will apply all of the detected configurataion file changes to the `azurerm_frontdoor` resource in Azure. If you feel you have done this step in error you will need to remove the `explicit_resource_order` table from your state file, however modifying the state file is not advised and is intended for advanced users, administrators, and IT Professionals only.

## Import Your azurerm_frontdoor_custom_https_configuration Settings Into Your State File

At this point, you have now successfully upgraded your provider and modified your configuration file to be **v2.58.0** compliant. You will need to import your frontend endpoint `custom_https_configuration` settings into a new `azurerm_frontdoor_custom_https_configuration` resource. This is done by modifying your configuration file with a new `azurerm_frontdoor_custom_https_configuration` resource stub for each of your frontend endpoints in your configuration file so they can be imported into the state file without causing an error during `apply`. To do this you will need to add the following `azurerm_frontdoor_custom_https_configuration` stubs to the end of your configuration file:

```hcl
resource "azurerm_frontdoor_custom_https_configuration" "default" {
}

resource "azurerm_frontdoor_custom_https_configuration" "custom" {
}
```

Once you have added these definitons to your configuration file you will run the following commands to import the new resources into your state file:

```
terraform import azurerm_frontdoor_custom_https_configuration.default /subscriptions/{subscription}/resourceGroups/{resorceGroup}/providers/Microsoft.Network/frontDoors/{frontDoor}/customHttpsConfiguration/default

terraform import azurerm_frontdoor_custom_https_configuration.custom /subscriptions/{subscription}/resourceGroups/{resorceGroup}/providers/Microsoft.Network/frontDoors/{frontDoor}/customHttpsConfiguration/custom
```

The output from these command should look something like this:

```
> terraform import azurerm_frontdoor_custom_https_configuration.default /subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor/customHttpsConfiguration/default
azurerm_frontdoor_custom_https_configuration.default: Importing from ID "/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor/customHttpsConfiguration/default"...
azurerm_frontdoor_custom_https_configuration.default: Import prepared!
  Prepared azurerm_frontdoor_custom_https_configuration for import
azurerm_frontdoor_custom_https_configuration.default: Refreshing state... [id=/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor/customHttpsConfiguration/default]

Import successful!

The resources that were imported are shown above. These resources are now in
your Terraform state and will henceforth be managed by Terraform.
```

```
> terraform import azurerm_frontdoor_custom_https_configuration.custom /subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor/customHttpsConfiguration/custom
azurerm_frontdoor_custom_https_configuration.custom: Importing from ID "/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor/customHttpsConfiguration/custom"...
azurerm_frontdoor_custom_https_configuration.custom: Import prepared!
  Prepared azurerm_frontdoor_custom_https_configuration for import
azurerm_frontdoor_custom_https_configuration.custom: Refreshing state... [id=/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor/customHttpsConfiguration/custom]

Import successful!

The resources that were imported are shown above. These resources are now in
your Terraform state and will henceforth be managed by Terraform.
```

Once the `azurerm_frontdoor_custom_https_configuration` stubs have been imported into your state file you will now need to update the stubs to have the correct values that live in Azure for your Front Door resource. So in this example we will be updating our `azurerm_frontdoor_custom_https_configuration` stubs to have these configurations settings:

```hcl
resource "azurerm_frontdoor_custom_https_configuration" "default" {
  frontend_endpoint_id              = "${azurerm_frontdoor.example.id}/frontendEndpoints/${local.default_frontend_name}"
  custom_https_provisioning_enabled = false
}

resource "azurerm_frontdoor_custom_https_configuration" "custom" {
  frontend_endpoint_id              = "${azurerm_frontdoor.example.id}/frontendEndpoints/${local.custom_frontend_name}"
  custom_https_provisioning_enabled = true

  custom_https_configuration {
    certificate_source = "FrontDoor"
  }
}
```

Now that you have updated the `azurerm_frontdoor_custom_https_configuration` resources with the correct values the last thing you need to do is run a `terrform plan` command and you will be back in the correct state where terraform can again manage your `azurerm_frontdoor` resource via Terraform. If all of the steps were followed correctly the output from the `plan` should look something like this.

```
> terraform plan

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

azurerm_resource_group.example: Refreshing state... [id=/subscriptions/XXXXXX/resourceGroups/example-rg]
azurerm_frontdoor.example: Refreshing state... [id=/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor]
azurerm_frontdoor_custom_https_configuration.default: Refreshing state... [id=/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor/customHttpsConfiguration/default]
azurerm_frontdoor_custom_https_configuration.custom: Refreshing state... [id=/subscriptions/XXXXXX/resourceGroups/example-rg/providers/Microsoft.Network/frontDoors/exampleFrontdoor/customHttpsConfiguration/custom]

------------------------------------------------------------------------

No changes. Infrastructure is up-to-date.

This means that Terraform did not detect any differences between your
configuration and real physical resources that exist. As a result, no
actions need to be performed.
```
